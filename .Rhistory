inner_join(Bonds_10Y_eom_long, by = c("date", "Country")) %>%
inner_join(FX_eom_long, by = c("date", "Country"))
Merged_Bonds_FX <- Merged_Bonds_FX %>%
arrange(Country, date) %>%  # Sort by Country and Date
group_by(Country) %>%       # Group by Country for lagging
mutate(
P_10Y_prev = lag(P_10Y), # 10-year bond price at t-1
FX_prev = lag(FX),
P_3M_prev = lag(P_3M)# Exchange rate at t-1
) %>%
ungroup()
Merged_Bonds_FX <- Merged_Bonds_FX %>%
mutate(
excess_return = (((P_10Y-P_3M) / P_10Y_prev) - (1 / P_3M_prev)) * (FX / FX_prev)
)
Merged_Bonds_FX <- Merged_Bonds_FX %>%
group_by(Country) %>%
# 1) Sort by date to ensure correct interpolation order
arrange(date, .by_group = TRUE) %>%
# 2) Calculate group-wise mean & sd for 6-sigma bounds
mutate(
mean_ret = mean(excess_return, na.rm = TRUE),
sd_ret   = sd(excess_return, na.rm = TRUE),
upper_6sigma = mean_ret + 3 * sd_ret,
lower_6sigma = mean_ret - 3 * sd_ret
) %>%
# 3) Replace outliers with NA
mutate(
excess_return = if_else(
excess_return > upper_6sigma | excess_return < lower_6sigma,
NA_real_,
excess_return
)
) %>%
# 4) Interpolate newly created NAs
mutate(
excess_return = na.approx(excess_return, x = date, na.rm = FALSE) #na.rm means
) %>%
# 5) Remove temporary columns if you don't need them anymore
select(-mean_ret, -sd_ret, -upper_6sigma, -lower_6sigma) %>%
ungroup()
Bonds_ex_ret_long <- Merged_Bonds_FX %>%
select(
Country, date, excess_return
)
Bonds_ex_ret_wide <- Bonds_ex_ret_long %>%
pivot_wider(names_from = Country, values_from = excess_return)
annualized_returns <- Bonds_ex_ret_wide %>%
mutate(across(-date, ~ (1 + .)^12 - 1))
plot_list_ex_ret<- list()
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
correlation_matrix_3M <- cor(Bonds_prices_3M[,1:10])
correlation_matrix_10Y <- cor(Bonds_prices_10Y[,1:10])
par(mar = c(1, 5, 2, 2))
corrplot(correlation_matrix_3M, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.col = "black", tl.srt = 45, addCoef.col = "black",
tl.cex = 0.7, # Adjust font size of text labels
cl.cex = 0.6, # Adjust font size of color legend
number.cex = 0.6) # Adjust font size of correlation coefficients
title("Correlation Matrix of 3M Bond Prices", cex.main = 1)
corrplot(correlation_matrix_10Y, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.col = "black", tl.srt = 45, addCoef.col = "black",
tl.cex = 0.7, # Adjust font size of text labels
cl.cex = 0.6, # Adjust font size of color legend
number.cex = 0.6) # Adjust font size of correlation coefficients
title("Correlation Matrix of 10Y Bond Prices", cex.main = 1)
save(Bonds_prices_3M, Bonds_prices_10Y,Exchange_rates,B_10Y_Tickers,B_3M_Tickers,FX_names,Tickers, file = "Bond_PX_FX.RData")
save(plot_list_3M,plot_list_10Y,plot_list_FX, file ="Bond_PX_FX_Plots.RData")
eomonth_data <- function(data){
data %>%
mutate(date = as.Date(date)) %>%
group_by(month = floor_date(date, "month")) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(-month)
}
Bonds_3M_eom <- eomonth_data(Bonds_prices_3M)
Bonds_10Y_eom <- eomonth_data(Bonds_prices_10Y)
FX_eom <- eomonth_data(Exchange_rates)
colnames(Bonds_3M_eom) <- c(Countries,"date")
colnames(Bonds_10Y_eom) <- c(Countries,"date")
colnames(FX_eom) <- c(Countries,"date")
Bonds_3M_eom_long <- Bonds_3M_eom %>% pivot_longer(-date, names_to = "Country", values_to = "P_3M")
Bonds_10Y_eom_long <- Bonds_10Y_eom %>% pivot_longer(-date, names_to = "Country", values_to = "P_10Y")
FX_eom_long <- FX_eom %>% pivot_longer(-date, names_to = "Country", values_to = "FX")
Merged_Bonds_FX <- Bonds_3M_eom_long %>%
inner_join(Bonds_10Y_eom_long, by = c("date", "Country")) %>%
inner_join(FX_eom_long, by = c("date", "Country"))
Merged_Bonds_FX <- Merged_Bonds_FX %>%
arrange(Country, date) %>%  # Sort by Country and Date
group_by(Country) %>%       # Group by Country for lagging
mutate(
P_10Y_prev = lag(P_10Y), # 10-year bond price at t-1
FX_prev = lag(FX),
P_3M_prev = lag(P_3M)# Exchange rate at t-1
) %>%
ungroup()
Merged_Bonds_FX <- Merged_Bonds_FX %>%
mutate(
excess_return = (((P_10Y-P_3M) / P_10Y_prev) - (1 / P_3M_prev)) * (FX / FX_prev)
)
################################################################### added by Farkas ###################################################################
library(dplyr)
library(zoo)
Merged_Bonds_FX <- Merged_Bonds_FX %>%
group_by(Country) %>%
arrange(date, .by_group = TRUE) %>%
# 1) Compute per-country mean & sd
mutate(
mean_ret     = mean(excess_return, na.rm = TRUE),
sd_ret       = sd(excess_return, na.rm = TRUE),
upper_3sigma = mean_ret + 3 * sd_ret,
lower_3sigma = mean_ret - 3 * sd_ret
) %>%
# 2) Replace outliers with NA
mutate(
excess_return = if_else(
excess_return > upper_3sigma | excess_return < lower_3sigma,
NA_real_,
excess_return
)
) %>%
# 3) Forward fill newly introduced NAs
mutate(
# na.locf() will carry the last non-NA value forward
excess_return = na.locf(excess_return, na.rm = FALSE)
) %>%
# 4) (Optional) Backward fill any leading NAs that remain
mutate(
excess_return = na.locf(excess_return, fromLast = TRUE, na.rm = FALSE)
) %>%
# 5) Drop temp columns
select(-mean_ret, -sd_ret, -upper_3sigma, -lower_3sigma) %>%
ungroup()
View(Merged_Bonds_FX)
Bonds_ex_ret_long <- Merged_Bonds_FX %>%
select(
Country, date, excess_return
)
Bonds_ex_ret_wide <- Bonds_ex_ret_long %>%
pivot_wider(names_from = Country, values_from = excess_return)
annualized_returns <- Bonds_ex_ret_wide %>%
mutate(across(-date, ~ (1 + .)^12 - 1))
plot_list_ex_ret<- list()
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
View(Merged_Bonds_FX)
Merged_Bonds_FX <- Merged_Bonds_FX %>%
mutate(
# If any of these are smaller than 1e-8 in absolute value, set them to 1e-8
P_3M      = if_else(abs(P_3M) < 1e-8, 1e-8, P_3M),
P_10Y     = if_else(abs(P_10Y) < 1e-8, 1e-8, P_10Y),
P_3M_prev = if_else(abs(P_3M_prev) < 1e-8, 1e-8, P_3M_prev),
P_10Y_prev= if_else(abs(P_10Y_prev) < 1e-8, 1e-8, P_10Y_prev)
) %>%
# then (re)compute your excess_return
mutate(
excess_return = (((P_10Y - P_3M) / P_10Y_prev) - (1 / P_3M_prev)) * (FX / FX_prev)
)
correlation_matrix_3M <- cor(Bonds_prices_3M[,1:10])
correlation_matrix_10Y <- cor(Bonds_prices_10Y[,1:10])
par(mar = c(1, 5, 2, 2))
corrplot(correlation_matrix_3M, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.col = "black", tl.srt = 45, addCoef.col = "black",
tl.cex = 0.7, # Adjust font size of text labels
cl.cex = 0.6, # Adjust font size of color legend
number.cex = 0.6) # Adjust font size of correlation coefficients
title("Correlation Matrix of 3M Bond Prices", cex.main = 1)
corrplot(correlation_matrix_10Y, method = "color", type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.col = "black", tl.srt = 45, addCoef.col = "black",
tl.cex = 0.7, # Adjust font size of text labels
cl.cex = 0.6, # Adjust font size of color legend
number.cex = 0.6) # Adjust font size of correlation coefficients
title("Correlation Matrix of 10Y Bond Prices", cex.main = 1)
save(Bonds_prices_3M, Bonds_prices_10Y,Exchange_rates,B_10Y_Tickers,B_3M_Tickers,FX_names,Tickers, file = "Bond_PX_FX.RData")
save(plot_list_3M,plot_list_10Y,plot_list_FX, file ="Bond_PX_FX_Plots.RData")
eomonth_data <- function(data){
data %>%
mutate(date = as.Date(date)) %>%
group_by(month = floor_date(date, "month")) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(-month)
}
Bonds_3M_eom <- eomonth_data(Bonds_prices_3M)
Bonds_10Y_eom <- eomonth_data(Bonds_prices_10Y)
FX_eom <- eomonth_data(Exchange_rates)
colnames(Bonds_3M_eom) <- c(Countries,"date")
colnames(Bonds_10Y_eom) <- c(Countries,"date")
colnames(FX_eom) <- c(Countries,"date")
Bonds_3M_eom_long <- Bonds_3M_eom %>% pivot_longer(-date, names_to = "Country", values_to = "P_3M")
Bonds_10Y_eom_long <- Bonds_10Y_eom %>% pivot_longer(-date, names_to = "Country", values_to = "P_10Y")
FX_eom_long <- FX_eom %>% pivot_longer(-date, names_to = "Country", values_to = "FX")
Merged_Bonds_FX <- Bonds_3M_eom_long %>%
inner_join(Bonds_10Y_eom_long, by = c("date", "Country")) %>%
inner_join(FX_eom_long, by = c("date", "Country"))
Merged_Bonds_FX <- Merged_Bonds_FX %>%
arrange(Country, date) %>%  # Sort by Country and Date
group_by(Country) %>%       # Group by Country for lagging
mutate(
P_10Y_prev = lag(P_10Y), # 10-year bond price at t-1
FX_prev = lag(FX),
P_3M_prev = lag(P_3M)# Exchange rate at t-1
) %>%
ungroup()
Merged_Bonds_FX <- Merged_Bonds_FX %>%
mutate(
excess_return = (((P_10Y-P_3M) / P_10Y_prev) - (1 / P_3M_prev)) * (FX / FX_prev)
)
Merged_Bonds_FX <- Merged_Bonds_FX %>%
mutate(
# If any of these are smaller than 1e-8 in absolute value, set them to 1e-8
P_3M      = if_else(abs(P_3M) < 1e-8, 1e-8, P_3M),
P_10Y     = if_else(abs(P_10Y) < 1e-8, 1e-8, P_10Y),
P_3M_prev = if_else(abs(P_3M_prev) < 1e-8, 1e-8, P_3M_prev),
P_10Y_prev= if_else(abs(P_10Y_prev) < 1e-8, 1e-8, P_10Y_prev)
) %>%
# then (re)compute your excess_return
mutate(
excess_return = (((P_10Y - P_3M) / P_10Y_prev) - (1 / P_3M_prev)) * (FX / FX_prev)
)
View(Merged_Bonds_FX)
Bonds_ex_ret_long <- Merged_Bonds_FX %>%
select(
Country, date, excess_return
)
Bonds_ex_ret_wide <- Bonds_ex_ret_long %>%
pivot_wider(names_from = Country, values_from = excess_return)
annualized_returns <- Bonds_ex_ret_wide %>%
mutate(across(-date, ~ (1 + .)^12 - 1))
plot_list_ex_ret<- list()
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
View(Merged_Bonds_FX)
View(annualized_returns)
missing_values(annualized_returns)
# do the NA, missing, or very small values in the data analysis
# check for missing values
missing_values <- function(data){
data %>%
summarise_all(~ sum(is.na(.)))
}
missing_values(Bonds_prices_3M)
missing_values(Bonds_prices_10Y)
missing_values(Exchange_rates)
missing_values(annualized_returns)
# check for very small values
small_values <- function(data){
data %>%
summarise_all(~ sum(. < 0.01))
}
small_values(Bonds_prices_3M)
small_values(Bonds_prices_10Y)
small_values(Exchange_rates)
small_values(annualized_returns)
# check for negative values
negative_values <- function(data){
data %>%
summarise_all(~ sum(. < 0))
}
negative_values(Bonds_prices_3M)
negative_values(Bonds_prices_10Y)
negative_values(Exchange_rates)
#######################################################################
library(dplyr)
library(tidyr)
library(zoo)
# 1) Pivot annualized_returns long to have columns: date, Country, AnnReturn
annualized_returns_long <- annualized_returns %>%
pivot_longer(
-date,                      # all columns except 'date'
names_to = "Country",
values_to = "AnnReturn"
) %>%
# 2) Group by each Country
group_by(Country) %>%
arrange(date, .by_group = TRUE) %>%
# 3) Calculate mean ± 3σ per Country
mutate(
mean_val     = mean(AnnReturn, na.rm = TRUE),
sd_val       = sd(AnnReturn, na.rm = TRUE),
upper_3sigma = mean_val + 3 * sd_val,
lower_3sigma = mean_val - 3 * sd_val
) %>%
# 4) Set out-of-bounds returns to NA
mutate(
AnnReturn = if_else(
AnnReturn > upper_3sigma | AnnReturn < lower_3sigma,
NA_real_,
AnnReturn
)
) %>%
# 5) (Optional) Fill those NAs so we don't break the time series
# Here we forward-fill then backward-fill, but you can pick another interpolation
mutate(
AnnReturn = na.locf(AnnReturn, na.rm = FALSE),       # forward fill
AnnReturn = na.locf(AnnReturn, fromLast = TRUE, na.rm = FALSE) # backward fill
) %>%
# Remove helper columns
select(-mean_val, -sd_val, -upper_3sigma, -lower_3sigma) %>%
ungroup()
# 6) Pivot back to wide format if desired
annualized_returns_3sigma <- annualized_returns_long %>%
pivot_wider(
names_from = "Country",
values_from = "AnnReturn"
)
View(annualized_returns_3sigma)
# 1) Pivot annualized_returns to long (assuming it has columns: date, Country1, Country2, ..., etc.)
annualized_returns_long <- annualized_returns %>%
pivot_longer(
-date,            # pivot all columns except 'date'
names_to = "Country",
values_to = "AnnReturn"
) %>%
arrange(date, Country)
# 2) IQR-based outlier detection per Country
annualized_returns_long <- annualized_returns_long %>%
group_by(Country) %>%
# Calculate Q1, Q3, and IQR
mutate(
Q1  = quantile(AnnReturn, probs = 0.25, na.rm = TRUE),
Q3  = quantile(AnnReturn, probs = 0.75, na.rm = TRUE),
IQR = Q3 - Q1
) %>%
# Define lower & upper bounds using (Q1 - 1.5*IQR) and (Q3 + 1.5*IQR)
mutate(
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR
) %>%
# 3) Replace outliers with NA
mutate(
AnnReturn = if_else(
AnnReturn < lower_bound | AnnReturn > upper_bound,
NA_real_,
AnnReturn
)
) %>%
# 4) Fill new NA values
# Forward fill, then backward fill (or any interpolation you prefer)
arrange(date) %>%  # ensure chronological order for fill
mutate(
AnnReturn = na.locf(AnnReturn, na.rm = FALSE),
AnnReturn = na.locf(AnnReturn, fromLast = TRUE, na.rm = FALSE)
) %>%
# 5) Drop helper columns if you don't need them
select(-Q1, -Q3, -IQR, -lower_bound, -upper_bound) %>%
ungroup()
# 6) Pivot back to wide if desired
annualized_returns_iqr <- annualized_returns_long %>%
pivot_wider(
names_from = "Country",
values_from = "AnnReturn"
)
View(annualized_returns_iqr)
plot_list_ex_ret<- list()
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns_iqr, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
#######################################################################
library(dplyr)
library(tidyr)
library(zoo)
annualized_returns_chopped <- annualized_returns %>%
# 1) Pivot to long format
pivot_longer(
cols = -date,
names_to = "Country",
values_to = "AnnReturn"
) %>%
# 2) Arrange by date & group by country
group_by(Country) %>%
arrange(date, .by_group = TRUE) %>%
# 3) Chop values above +500% or below -500% (±5 in decimal), replace w/ NA
mutate(
AnnReturn = if_else(abs(AnnReturn) > 5, NA_real_, AnnReturn)
) %>%
# 4) Fill newly introduced NAs forward, then backward
mutate(
AnnReturn = na.locf(AnnReturn, na.rm = FALSE),          # forward fill
AnnReturn = na.locf(AnnReturn, fromLast = TRUE, na.rm = FALSE) # backward fill
) %>%
ungroup() %>%
# 5) Pivot back to wide format (optional)
pivot_wider(
names_from = "Country",
values_from = "AnnReturn"
)
plot_list_ex_ret<- list()
plot_list_ex_ret[[i]] <- ggplot(annualized_returns_chopped, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns_chopped, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
annualized_returns_chopped <- annualized_returns %>%
# 1) Pivot to long format
pivot_longer(
cols = -date,
names_to = "Country",
values_to = "AnnReturn"
) %>%
# 2) Arrange by date & group by country
group_by(Country) %>%
arrange(date, .by_group = TRUE) %>%
# 3) Chop values above +500% or below -500% (±5 in decimal), replace w/ NA
mutate(
AnnReturn = if_else(abs(AnnReturn) > 10, NA_real_, AnnReturn)
) %>%
# 4) Fill newly introduced NAs forward, then backward
mutate(
AnnReturn = na.locf(AnnReturn, na.rm = FALSE),          # forward fill
AnnReturn = na.locf(AnnReturn, fromLast = TRUE, na.rm = FALSE) # backward fill
) %>%
ungroup() %>%
# 5) Pivot back to wide format (optional)
pivot_wider(
names_from = "Country",
values_from = "AnnReturn"
)
plot_list_ex_ret<- list()
for (i in 1:10) {
column_name <- Countries[i]
plot_list_ex_ret[[i]] <- ggplot(annualized_returns_chopped, aes(x = date, y = !!sym(column_name))) +
geom_line() +
theme_minimal() +
labs(x = "Date", y = "Bond Excess Return", title = paste(column_name))+
theme(
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
plot.title = element_text(size = 7)
)
}
grid.arrange(grobs = plot_list_ex_ret, ncol = 2)
